[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSAN 5200",
    "section": "",
    "text": "hello world!"
  },
  {
    "objectID": "bar_charts.html",
    "href": "bar_charts.html",
    "title": "DSAN 5200",
    "section": "",
    "text": "import pandas as pd\nimport os\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n# Load poverty data\npoverty_data = pd.read_csv(\"data/clean_data/state_poverty.csv\")\n\n# Directory with state drug data CSVs\nfolder_path = \"data/state_data\"\nfiles = [f for f in os.listdir(folder_path) if f.endswith(\".csv\")]\n\n# Loop through each state file and generate plots\nfor file in files:\n    state_name = file.replace(\".csv\", \"\").title()\n    \n    # Read drug usage data\n    df = pd.read_csv(os.path.join(folder_path, file))\n    df = df.iloc[8:18, :]  # Age group rows only\n    df = df.drop(columns=[\"Unnamed: 0\"], errors=\"ignore\")\n\n    # Rename columns for consistency\n    df = df.rename(columns={df.columns[0]: \"Age Group\"})\n    df[\"state\"] = state_name\n\n    # Reshape data for faceted bar plot\n    drug_columns = df.columns[2:-1]  # exclude Age Group and state\n    df_melted = df.melt(id_vars=[\"Age Group\"], value_vars=drug_columns,\n                        var_name=\"Substance\", value_name=\"Usage (%)\")\n\n    # Get matching poverty info\n    state_pov = poverty_data[poverty_data[\"name\"] == state_name]\n\n    # Set up subplots: 1 row, 2 columns\n    subfig = make_subplots(\n        rows=1, cols=2,\n        column_widths=[0.75, 0.25],\n        specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}]],\n        subplot_titles=[f\"{state_name} - Substance Use by Age\", \"Poverty Rates\"]\n    )\n\n    # Drug usage bar plot (faceted manually)\n    for substance in df_melted[\"Substance\"].unique():\n        df_sub = df_melted[df_melted[\"Substance\"] == substance]\n        subfig.add_trace(\n            go.Bar(x=df_sub[\"Age Group\"], y=df_sub[\"Usage (%)\"], name=substance),\n            row=1, col=1\n        )\n\n    # Poverty bar plot\n    if not state_pov.empty:\n        subfig.add_trace(\n            go.Bar(\n                x=[\"Total Poverty\", \"Child Poverty\"],\n                y=[state_pov.iloc[0][\"total_pov\"], state_pov.iloc[0][\"child_pov\"]],\n                marker_color=\"crimson\",\n                name=\"Poverty\"\n            ),\n            row=1, col=2\n        )\n\n    subfig.update_layout(\n    title_text=f\"{state_name}: Drug Use vs Poverty\",\n    showlegend=True,\n    height=600,\n    width=1200,\n    legend_title=\"Drug Type\",\n    legend=dict(\n        orientation=\"v\",\n        x=1.02,  # Push legend just outside the right edge\n        y=1,\n        bgcolor=\"rgba(255,255,255,0.7)\",\n        bordercolor=\"black\",\n        borderwidth=1\n    )\n    )\n\n    subfig.update_xaxes(title_text=\"Age Groups\", row=1, col=1)\n    subfig.update_yaxes(title_text=\"Usage (%)\", row=1, col=1)\n    subfig.update_yaxes(title_text=\"Poverty Rate (%)\", row=1, col=2)\n\n    subfig.show()\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n\n%pip install dash\nimport dash\nfrom dash import dcc, html, Input, Output\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport os\n\n# Load poverty data\npoverty_data = pd.read_csv(\"data/clean_data/state_poverty.csv\")\npoverty_data[\"code\"] = poverty_data[\"code\"].str.upper()  # Ensure state codes are uppercase\n\n# Create US map with poverty rates\nfig_map = px.choropleth(\n    poverty_data,\n    locations=\"code\",\n    locationmode=\"USA-states\",\n    color=\"total_pov\",\n    hover_name=\"name\",\n    color_continuous_scale=\"Reds\",\n    scope=\"usa\",\n    title=\"Click a State to See Substance Use vs Poverty\"\n)\n\n# Initialize Dash app\napp = dash.Dash(__name__)\nserver = app.server  # for deployment\n\n# Layout\napp.layout = html.Div([\n    html.H2(\"US Substance Use & Poverty Dashboard\"),\n    dcc.Graph(id=\"us-map\", figure=fig_map),\n    dcc.Graph(id=\"state-details\")\n])\n\n# Callback to update plot based on state click\n@app.callback(\n    Output(\"state-details\", \"figure\"),\n    Input(\"us-map\", \"clickData\")\n)\ndef update_state_plot(clickData):\n    if not clickData:\n        return go.Figure().update_layout(title=\"Click on a state to view data.\")\n\n    state_code = clickData[\"points\"][0][\"location\"]\n    state_name = poverty_data[poverty_data[\"code\"] == state_code][\"name\"].values[0]\n    file_path = f\"data/state_data/{state_name.lower()}.csv\"\n\n    if not os.path.exists(file_path):\n        return go.Figure().update_layout(title=f\"No drug usage data found for {state_name}\")\n\n    # Load drug usage data\n    df = pd.read_csv(file_path)\n    df = df.iloc[8:18, :].drop(columns=[\"Unnamed: 0\"], errors=\"ignore\")\n    df = df.rename(columns={df.columns[0]: \"Age Group\"})\n    df[\"state\"] = state_name\n    drug_columns = df.columns[2:-1]\n    df_melted = df.melt(id_vars=[\"Age Group\"], value_vars=drug_columns,\n                        var_name=\"Substance\", value_name=\"Usage (%)\")\n    state_pov = poverty_data[poverty_data[\"name\"] == state_name]\n\n    # Create subplot\n    subfig = make_subplots(\n        rows=1, cols=2,\n        column_widths=[0.75, 0.25],\n        specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}]],\n        subplot_titles=[f\"{state_name} - Substance Use by Age\", \"Poverty Rates\"]\n    )\n\n    # Add drug use bars\n    for substance in df_melted[\"Substance\"].unique():\n        df_sub = df_melted[df_melted[\"Substance\"] == substance]\n        subfig.add_trace(\n            go.Bar(x=df_sub[\"Age Group\"], y=df_sub[\"Usage (%)\"], name=substance),\n            row=1, col=1\n        )\n\n    # Add poverty bars\n    if not state_pov.empty:\n        subfig.add_trace(\n            go.Bar(\n                x=[\"Total Poverty\", \"Child Poverty\"],\n                y=[state_pov.iloc[0][\"total_pov\"], state_pov.iloc[0][\"child_pov\"]],\n                marker_color=\"crimson\",\n                name=\"Poverty\"\n            ),\n            row=1, col=2\n        )\n\n    # Final layout tweaks\n    subfig.update_layout(\n        title=f\"{state_name}: Drug Use vs Poverty\",\n        height=600,\n        width=1200,\n        showlegend=True,\n        legend_title=\"Drug Type\",\n        legend=dict(\n            orientation=\"v\",\n            x=1.02,\n            y=1,\n            bgcolor=\"rgba(255,255,255,0.7)\",\n            bordercolor=\"black\",\n            borderwidth=1\n        )\n    )\n    subfig.update_xaxes(title_text=\"Age Groups\", row=1, col=1)\n    subfig.update_yaxes(title_text=\"Usage (%)\", row=1, col=1)\n    subfig.update_yaxes(title_text=\"Poverty Rate (%)\", row=1, col=2)\n\n    return subfig\n\n# Run the app\nif __name__ == \"__main__\":\n    app.run(debug=True)\n\nRequirement already satisfied: dash in /opt/anaconda3/lib/python3.11/site-packages (3.0.3)\nRequirement already satisfied: Flask&lt;3.1,&gt;=1.0.4 in /opt/anaconda3/lib/python3.11/site-packages (from dash) (2.2.5)\nRequirement already satisfied: Werkzeug&lt;3.1 in /opt/anaconda3/lib/python3.11/site-packages (from dash) (2.2.3)\nRequirement already satisfied: plotly&gt;=5.0.0 in /opt/anaconda3/lib/python3.11/site-packages (from dash) (5.9.0)\nRequirement already satisfied: importlib-metadata in /opt/anaconda3/lib/python3.11/site-packages (from dash) (7.0.1)\nRequirement already satisfied: typing-extensions&gt;=4.1.1 in /opt/anaconda3/lib/python3.11/site-packages (from dash) (4.9.0)\nRequirement already satisfied: requests in /opt/anaconda3/lib/python3.11/site-packages (from dash) (2.32.3)\nRequirement already satisfied: retrying in /opt/anaconda3/lib/python3.11/site-packages (from dash) (1.3.4)\nRequirement already satisfied: nest-asyncio in /opt/anaconda3/lib/python3.11/site-packages (from dash) (1.6.0)\nRequirement already satisfied: setuptools in /opt/anaconda3/lib/python3.11/site-packages (from dash) (68.2.2)\nRequirement already satisfied: Jinja2&gt;=3.0 in /opt/anaconda3/lib/python3.11/site-packages (from Flask&lt;3.1,&gt;=1.0.4-&gt;dash) (3.1.3)\nRequirement already satisfied: itsdangerous&gt;=2.0 in /opt/anaconda3/lib/python3.11/site-packages (from Flask&lt;3.1,&gt;=1.0.4-&gt;dash) (2.0.1)\nRequirement already satisfied: click&gt;=8.0 in /opt/anaconda3/lib/python3.11/site-packages (from Flask&lt;3.1,&gt;=1.0.4-&gt;dash) (8.1.7)\nRequirement already satisfied: tenacity&gt;=6.2.0 in /opt/anaconda3/lib/python3.11/site-packages (from plotly&gt;=5.0.0-&gt;dash) (8.2.2)\nRequirement already satisfied: MarkupSafe&gt;=2.1.1 in /opt/anaconda3/lib/python3.11/site-packages (from Werkzeug&lt;3.1-&gt;dash) (2.1.3)\nRequirement already satisfied: zipp&gt;=0.5 in /opt/anaconda3/lib/python3.11/site-packages (from importlib-metadata-&gt;dash) (3.17.0)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /opt/anaconda3/lib/python3.11/site-packages (from requests-&gt;dash) (2.0.4)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in /opt/anaconda3/lib/python3.11/site-packages (from requests-&gt;dash) (3.4)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /opt/anaconda3/lib/python3.11/site-packages (from requests-&gt;dash) (2.0.7)\nRequirement already satisfied: certifi&gt;=2017.4.17 in /opt/anaconda3/lib/python3.11/site-packages (from requests-&gt;dash) (2024.12.14)\nRequirement already satisfied: six&gt;=1.7.0 in /opt/anaconda3/lib/python3.11/site-packages (from retrying-&gt;dash) (1.16.0)\nNote: you may need to restart the kernel to use updated packages."
  }
]