coord_cartesian(expand=FALSE)+
scale_x_continuous(labels = label_comma())+
scale_y_continuous(labels = label_comma())+
scale_color_manual(
labels = c("Fail", "Pass"),
values = c("blue", "orange")
)+
my_theme
year_summary <- df |> group_by(year) |> summarize(number = count(binary))
year_summary <- df |> group_by(year) |> summarize(number = sum(binary))
rlang::last_trace()
year_summary <- df |> group_by(year, binary) |> summarize(count = n())
View(year_summary)
year_summary <- df |> group_by(year, binary) |> summarize(count = n(),.groups = "drop")
View(year_summary)
?pivot_wider
year_summary_table <- year_summary |>
pivot_wider(
id_cols = year,
names_from = binary,
values_from = count
)
View(year_summary_table)
knitr::kable(year_summary_table)
colnames(year_summary_table) <- c("Release Year", "Pass", "Fail")
knitr::kable(year_summary_table)
ggplot(df)+
geom_point(aes(x = budget_2013, y = domgross_2013, color = binary ),
alpha = 0.6)+
labs(title = "Budget vs. Domestic Box Office by Bechdel Test Result",
x = "Budget (2013 USD)",
y = "Domestic Gross Box Office(2013 USD)",
color = "Bechdel Test")+
coord_cartesian(expand=FALSE)+
scale_x_continuous(labels = label_comma())+
scale_y_continuous(labels = label_comma())+
scale_color_manual(
labels = c("Fail", "Pass"),
values = c("red", "forestgreen")
)+
my_theme
ggplot(df)+
geom_point(aes(x = budget_2013, y = domgross_2013, color = binary ),
alpha = 0.6)+
labs(title = "Budget vs. Domestic Box Office by Bechdel Test Result",
x = "Budget (2013 USD)",
y = "Domestic Gross Box Office(2013 USD)",
color = "Bechdel Test")+
coord_cartesian(expand=FALSE,
xlim = c(0,500000),
ylim = c(0, 2000000000))+
scale_x_continuous(labels = label_comma())+
scale_y_continuous(labels = label_comma())+
scale_color_manual(
labels = c("Fail", "Pass"),
values = c("red", "forestgreen")
)+
my_theme
ggplot(df)+
geom_point(aes(x = budget_2013, y = domgross_2013, color = binary ),
alpha = 0.6)+
labs(title = "Budget vs. Domestic Box Office by Bechdel Test Result",
x = "Budget (2013 USD)",
y = "Domestic Gross Box Office(2013 USD)",
color = "Bechdel Test")+
coord_cartesian(expand=FALSE,
xlim = c(0,500000),
ylim = c(0, 2000000))+
scale_x_continuous(labels = label_comma())+
scale_y_continuous(labels = label_comma())+
scale_color_manual(
labels = c("Fail", "Pass"),
values = c("red", "forestgreen")
)+
my_theme
ggplot(df)+
geom_point(aes(x = budget_2013, y = domgross_2013, color = binary ),
alpha = 0.6)+
labs(title = "Budget vs. Domestic Box Office by Bechdel Test Result",
x = "Budget (2013 USD)",
y = "Domestic Gross Box Office(2013 USD)",
color = "Bechdel Test")+
coord_cartesian(expand=FALSE,
xlim = c(0,500000),
ylim = c(0, 20000000))+
scale_x_continuous(labels = label_comma())+
scale_y_continuous(labels = label_comma())+
scale_color_manual(
labels = c("Fail", "Pass"),
values = c("red", "forestgreen")
)+
my_theme
ggplot(df)+
geom_point(aes(x = budget_2013, y = domgross_2013, color = binary ),
alpha = 0.6)+
labs(title = "Budget vs. Domestic Box Office by Bechdel Test Result",
x = "Budget (2013 USD)",
y = "Domestic Gross Box Office(2013 USD)",
color = "Bechdel Test")+
coord_cartesian(expand=FALSE,
xlim = c(0,500000),
ylim = c(0, 2000000000))+
scale_x_continuous(labels = label_comma())+
scale_y_continuous(labels = label_comma())+
scale_color_manual(
labels = c("Fail", "Pass"),
values = c("red", "forestgreen")
)+
my_theme
ggplot(df)+
geom_point(aes(x = budget_2013, y = domgross_2013, color = binary ),
alpha = 0.6)+
labs(title = "Budget vs. Domestic Box Office by Bechdel Test Result",
x = "Budget (2013 USD)",
y = "Domestic Gross Box Office(2013 USD)",
color = "Bechdel Test")+
coord_cartesian(expand=FALSE,
xlim = c(0,500000000),
ylim = c(0, 2000000000))+
scale_x_continuous(labels = label_comma())+
scale_y_continuous(labels = label_comma())+
scale_color_manual(
labels = c("Fail", "Pass"),
values = c("red", "forestgreen")
)+
my_theme
ggplot(year_summary)+
geom_bar(aes(x = year, y = count, color = binary))
?geom_bar
ggplot(year_summary)+
geom_col(aes(x = year, y = count, color = binary))
ggplot(year_summary)+
geom_col(aes(x = year, y = count, fill = binary))
ggplot(year_summary)+
geom_col(aes(x = year, y = count, fill = binary))+
labs(
title = "Count of Films Passing the Bechdel Test by Year",
x = "Year",
y = "Count"
)+
scale_fill_manual(
labels = c("Fail", "Pass"),
values = c("red", "forestgreen")
)+
coord_cartesian(expand = FALSE,
ylim = c(0,150))+
my_theme
ggplot(year_summary)+
geom_col(aes(x = year, y = count, fill = binary))+
labs(
title = "Count of Films Passing the Bechdel Test by Year",
x = "Year",
y = "Count",
fill = "Bechdel Test Result"
)+
scale_fill_manual(
labels = c("Fail", "Pass"),
values = c("red", "forestgreen")
)+
coord_cartesian(expand = FALSE,
ylim = c(0,150))+
my_theme
test_summary <- df |>
group_by(binary) |>
summarize(`Box Office` = mean(domgross_2013))
View(year_summary)
View(test_summary)
test_summary <- df |>
group_by(binary) |>
summarize("Mean Box Office" = mean(domgross_2013))
View(test_summary)
test_summary <- df |>
group_by(binary) |>
summarize("Mean Box Office" = mean(domgross_2013, na.rm = TRUE))
View(test_summary)
knitr::kable(test_summary)
colnames(test_summary) <- c("Passed Bechdel Test?", "Mean Domestic Box Office (2013 USD)")
knitr::kable(test_summary, format.args = list(big.mark = ","))
#| vscode: {languageId: r}
# IMPORT LIBRARIES
library(ISLR)
library(leaps)
library(tidyverse)
library(caret)
#| vscode: {languageId: r}
# IMPORT LIBRARIES
library(ISLR)
library(leaps)
library(tidyverse)
library(caret)
#| vscode: {languageId: r}
# GET DATA
data(Hitters)
# EXPLORE DATA
print(head(Hitters))
#| vscode: {languageId: r}
# EXPLORE MORE
print(dim(Hitters))
print(class(Hitters))
print(colnames(Hitters))
#| vscode: {languageId: r}
# STATISTICAL SUMMARY
summary(Hitters)
#| vscode: {languageId: r}
print(c("CHECK NUMBER OF NA:",with(Hitters, sum(is.na(Hitters)))))
#| vscode: {languageId: r}
# IMPORT LIBRARIES
library(ISLR)
library(leaps)
library(tidyverse)
library(caret)
#| vscode: {languageId: r}
# GET DATA
data(Hitters)
# EXPLORE DATA
print(head(Hitters))
#| vscode: {languageId: r}
# EXPLORE MORE
print(dim(Hitters))
print(class(Hitters))
print(colnames(Hitters))
#| vscode: {languageId: r}
# STATISTICAL SUMMARY
summary(Hitters)
#| vscode: {languageId: r}
print(c("CHECK NUMBER OF NA:",with(Hitters, sum(is.na(Hitters)))))
#| vscode: {languageId: r}
library(naniar)
vis_miss(Hitters)
#| vscode: {languageId: r}
print(c("CHECK NUMBER OF NA:",with(Hitters, sum(is.na(Hitters$Salary)))))
#| vscode: {languageId: r}
# remove rows with missing data
print(c("BEFORE",dim(Hitters)))
Hitters=na.omit(Hitters)
print(c("AFTER",dim(Hitters)))
#| vscode: {languageId: r}
print(c("CHECK NUMBER OF NA:",with(Hitters, sum(is.na(Hitters$Salary)))))
#| vscode: {languageId: r}
# RUN THE BEST SUBSET SELECTION ALGORITHM USING regsubsets
# USE Y=SALARY X=Everything else
# This code performs best subset selection for a linear regression model using the regsubsets function on the Hitters dataset, with Salary as the dependent variable and all other variables (.) as potential predictors. It computes various models with different subsets of predictors to determine the best-fitting model.e
regfit.full=regsubsets(Salary~.,Hitters)
#| vscode: {languageId: r}
#THE FUNCTION SUMMARY() REPORTS THE BEST SET OF VARIABLES FOR EACH MODEL SIZE.
summary(regfit.full)
#| vscode: {languageId: r}
# RUN THE BEST SUBSET SELECTION ALGORITHM USING regsubsets
# IN OUR EXAMPLE, WE HAVE N PREDICTOR VARIABLES IN THE DATA. SO, WE'LL USE NVMAX = N .
regfit.full=regsubsets(Salary~.,data=Hitters,nvmax=19)
# print(regfit.full)
#| vscode: {languageId: r}
# PRINT RESULTS
reg.summary=summary(regfit.full)
print(class(reg.summary))
print(reg.summary)
#| vscode: {languageId: r}
coef(regfit.full,1)
coef(regfit.full,2)
coef(regfit.full,19)
#| vscode: {languageId: r}
# LOOK AT AVAILABLE QUANTITIES
print(names(reg.summary))
#| vscode: {languageId: r}
# PRINT R^2 FOR THE 19 SUBSETS
print(length(reg.summary$rsq))
print(reg.summary$rsq)
# print(reg.summary$rsq[1])
#| vscode: {languageId: r}
# print(summary(regfit.full)$adjr2)
# PRINT ADJUSTED R^2 FOR THE 19 SUBSETS
print(reg.summary$adjr2)
print(c("SUBSET WITH MAXIMUM adjr2=",which.max(reg.summary$adjr2)))
#| vscode: {languageId: r}
# VISUALIZE adjr2 FOR ALL 19 SUBSETS (COLOR=adjr2)(TOP ROW=BEST)
# FEATURE SUBSETS CHOICES SHOWN ON X
# The code creates a plot of the adjusted R-squared values against the number of predictors for models generated by the regfit.full object. It helps visualize how the adjusted R-squared changes as more predictors are added to the model, providing insight into the model's complexity and explanatory power.
plot(regfit.full,scale="adjr2")
#| vscode: {languageId: r}
# GENERATE PLOT SHOWING adjr2 MAX
# Define Sub-Plots: Divides the plotting area into two sections arranged in one row and two columns (mfrow=c(1,2)), allowing for side-by-side comparison.
par(mfrow=c(1,2))
# Get Max M: Identifies the index (m) of the maximum adjusted R-squared value (adjr2) in the reg.summary object.
m=which.max(reg.summary$adjr2);
print(c("optimal feature subset-size according to adjr2:",m))
# Plot RSS: Draws a line plot of the residual sum of squares (RSS) against the number of variables.
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
points(m,reg.summary$rss[m], col="red",cex=2,pch=20)
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
points(m,reg.summary$adjr2[m], col="red",cex=2,pch=20)
points(m,reg.summary$rss[m], col="red")
#| vscode: {languageId: r}
# PLOT MIN CP POINT
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type='l')
m=which.min(reg.summary$cp)
print(c("optimal feature subset-size according to cp:",m))
points(m,reg.summary$cp[10],col="red",cex=2,pch=20)
#| vscode: {languageId: r}
# PLOT MIN BIC POINT
m=which.min(reg.summary$bic)
print(c("optimal feature subset-size according to BIC:",m))
plot(reg.summary$bic,xlab="Number of Variables",ylab="BIC",type='l')
points(m,reg.summary$bic[6],col="red",cex=2,pch=20)
#| vscode: {languageId: r}
# GENERATE MATRIX PLOTS FOR DIFFERENT METRICS
# sets up a 2x2 plotting layout using par(mfrow=c(2,2)), allowing for four plots to be displayed simultaneously.
par(mfrow=c(2,2))
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
#| vscode: {languageId: r}
# PRINT FITTING PARAMETERS FOR 11TH SUBSET
print(coef(regfit.full,11))
#| vscode: {languageId: r}
# This code utilizes the `regsubsets` function in R to perform forward selection for a linear regression model. It selects predictors from the `Hitters` dataset to predict `Salary`, considering up to 19 variables (`nvmax=19`) in a forward stepwise manner.
regfit.fwd=regsubsets(Salary~.,data=Hitters,nvmax=19,method="forward")
#| vscode: {languageId: r}
summary(regfit.fwd)
#| vscode: {languageId: r}
regfit.bwd=regsubsets(Salary~.,data=Hitters,nvmax=19,method="backward")
#| vscode: {languageId: r}
summary(regfit.bwd)
#| vscode: {languageId: r}
print(coef(regfit.full,7))
print(coef(regfit.fwd,7))
print(coef(regfit.bwd,7))
#| vscode: {languageId: r}
set.seed(1)
# Generate a random sample of logical values (TRUE or FALSE)
# The sample size is the number of rows in the 'Hitters' dataset
# The 'rep = TRUE' argument specifies that sampling is done with replacement
train=sample(c(TRUE,FALSE), nrow(Hitters),rep=TRUE)
# Print fraction of dataset in training set
# print(nrow(Hitters)) # print number of rows in df
# print(train)
print(sum(as.integer(train))/nrow(Hitters))
#| vscode: {languageId: r}
test=(!train)
# print(test)
print(sum(as.integer(test))/nrow(Hitters))
#| vscode: {languageId: r}
regfit.best=regsubsets(Salary~.,data=Hitters[train,],nvmax=19)
#| vscode: {languageId: r}
print(head(Hitters[test,]))
#| vscode: {languageId: r}
# convert to test model matrix
test.mat=model.matrix(Salary~.,data=Hitters[test,])
print(head(test.mat))
#| vscode: {languageId: r}
# Initialize a vector to store validation errors, with length 19
val.errors = rep(NA, 19)
# Iterate through 19 iterations
for (i in 1:19) {
# Extract coefficients for the 'i-th' subset from the 'regfit.best' object
coefi = coef(regfit.best, id = i)
# Select the predictor variables based on the coefficients
# and predict using the 'test.mat' data
pred = test.mat[, names(coefi)] %*% coefi
# Calculate the validation error as mean squared error
# by comparing the predicted values with the actual 'Salary' values
val.errors[i] = mean((Hitters$Salary[test] - pred)^2)
}
which.min(val.errors)
#| vscode: {languageId: r}
print("------------------")
print(val.errors)
print("------------------")
m=which.min(val.errors) #m=10
print(coef(regfit.best,m))
#| vscode: {languageId: r}
# Define a function called predict.regsubsets
predict.regsubsets = function(object, newdata, id, ...) {
# Extract the formula used to fit the model
form = as.formula(object$call[[2]])
# Create the model matrix for the new data based on the formula used in the model fitting
mat = model.matrix(form, newdata)
# Obtain the coefficients for the specified model subset (id)
coefi = coef(object, id = id)
# Extract the names of the predictor variables
xvars = names(coefi)
# Multiply the subset of the model matrix with the corresponding coefficients
# This calculates the predicted values for the new data
mat[, xvars] %*% coefi
}
#| vscode: {languageId: r}
regfit.best=regsubsets(Salary~.,data=Hitters,nvmax=19)
print(coef(regfit.best,10))
setwd("~/Downloads")
##
library(tidyverse)
library(xlsx)
library(xlsx)
library(openxlsx)
install.packages("openxlsx")
library(readxl)
data <- read_excel("est21all.xls")
View(data)
data <- read_excel("est21all.xls",
skip = 2)
View(data)
data <- read_excel("est21all.xls",
skip = 3)
View(data)
state_raw <- data |> filter(`County FIPS Code` == '000')
View(state_raw)
state_raw <- data |>
filter(`County FIPS Code` == '000') |>
select(c(3,4,8,14,23))
View(state_raw)
state <- data.frame(
code = state_raw$`Postal Code`,
name = state_raw$Name,
total_pov = state_raw$`Poverty Percent, All Ages`,
child_pov = state_raw$`Poverty Percent, Age 0-17`,
mhi = state_raw$`Median Household Income`
)
View(state_raw)
View(state)
state <- data.frame(
code = state_raw$`Postal Code`,
name = state_raw$Name,
total_pov = as.numeric(state_raw$`Poverty Percent, All Ages`),
child_pov = as.numeric(state_raw$`Poverty Percent, Age 0-17`),
mhi = as.numeric(state_raw$`Median Household Income`)
)
View(state)
county_raw <- data |>
filter(`County FIPS Code` != '000') |>
select(c(1,2,4,8,14,23))
county <- data.frame(
code = paste(county_raw$`State FIPS Code`,county_raw$`County FIPS Code`),
name = county_raw$Name,
total_pov = as.numeric(county_raw$`Poverty Percent, All Ages`),
child_pov = as.numeric(county_raw$`Poverty Percent, Age 0-17`),
mhi = as.numeric(county_raw$`Median Household Income`)
)
View(county)
?paste
county <- data.frame(
code = paste(county_raw$`State FIPS Code`,
county_raw$`County FIPS Code`,
sep = ""),
name = county_raw$Name,
total_pov = as.numeric(county_raw$`Poverty Percent, All Ages`),
child_pov = as.numeric(county_raw$`Poverty Percent, Age 0-17`),
mhi = as.numeric(county_raw$`Median Household Income`)
)
table(county)
table(county$total_pov)
table(is.na(county$total_pov))
county$name[is.na(county$total_pov)]
?write.csv
write.csv(state,
"state_poverty.csv"
row.names = FALSE)
write.csv(state,
"state_poverty.csv",
row.names = FALSE)
write.csv(county,
"county_poverty.csv",
row.names = FALSE)
##
library(tidyverse)
library(readxl)
data <- read_excel("../data/raw_data/est21all.xls",
skip = 3)
getwd()
setwd("~/Library/CloudStorage/Box-Box/DSAN-5200/ikd2-crg123-yg429-sr1672.github.io/data_cleaning")
data <- read_excel("../data/raw_data/est21all.xls",
skip = 3)
state_raw <- data |>
filter(`County FIPS Code` == '000') |>
select(c(3,4,8,14,23))
state <- data.frame(
code = state_raw$`Postal Code`,
name = state_raw$Name,
total_pov = as.numeric(state_raw$`Poverty Percent, All Ages`),
child_pov = as.numeric(state_raw$`Poverty Percent, Age 0-17`),
mhi = as.numeric(state_raw$`Median Household Income`)
)
state_raw <- data |>
filter(`County FIPS Code` == '000') |>
select(c(3,4,8,14,23))
state <- data.frame(
code = state_raw$`Postal Code`,
name = state_raw$Name,
total_pov = as.numeric(state_raw$`Poverty Percent, All Ages`),
child_pov = as.numeric(state_raw$`Poverty Percent, Age 0-17`),
mhi = as.numeric(state_raw$`Median Household Income`)
)
county_raw <- data |>
filter(`County FIPS Code` != '000') |>
select(c(1,2,4,8,14,23))
county <- data.frame(
code = paste(county_raw$`State FIPS Code`,
county_raw$`County FIPS Code`,
sep = ""),
name = county_raw$Name,
total_pov = as.numeric(county_raw$`Poverty Percent, All Ages`),
child_pov = as.numeric(county_raw$`Poverty Percent, Age 0-17`),
mhi = as.numeric(county_raw$`Median Household Income`)
)
write.csv(state,
"../data/cleaned_data/state_poverty.csv",
row.names = FALSE)
write.csv(state,
"../data/clean_data/state_poverty.csv",
row.names = FALSE)
write.csv(county,
"../data/clean_data/county_poverty.csv",
row.names = FALSE)
