auto.arima(multivar.ts[,"cpi"])
# fit and forecast CPI
cpi_fit <- arima(multivar.ts[,"cpi"], order = c(4,2,1), seasonal = c(0,0,2))
cpi_forecast <- forecast(cpi_fit, h = 12)
# create a matrix of the forecasts
fxreg <- cbind(corn_forecast$mean, diesel_forecast$mean, cpi_forecast$mean)
# rename columns
colnames(fxreg) <- c("corn", "diesel", "cpi")
# make into a matrix
fxreg <- as.matrix(fxreg)
# create an xreg matrix for the ARIMAX forecast
xreg <- multivar.ts[,-1]
# fit the ARIMAX model
egg_arimax_fit <- arima(multivar.ts[,"egg"], order = c(1,0,0), seasonal = list(order = c(2,0,0), period = 12), xreg = xreg)
# forecast log egg prices
tsp(fxreg) <- c(2025 + 3/12, 2026 + 2/12, 12)
egg_forecast <- forecast(egg_arimax_fit, xreg = fxreg, h = 12)
summary(egg_data)
summary(data)
summary(egg_arimax_fit)
# create a matrix of the forecasts
fxreg <- cbind(corn_forecast$mean, diesel_forecast$mean, cpi_forecast$mean)
# rename columns
colnames(fxreg) <- c("corn", "diesel", "cpi")
tsp(fxreg)
tsp(xreg)
tsp(multivar.ts)
View(data)
1/12
fxreg <- ts(fxreg, start = c(2025,2), frequency = 12)
fxreg
# create an xreg matrix for the ARIMAX forecast
xreg <- multivar.ts[,-1]
# fit the ARIMAX model
egg_arimax_fit <- arima(multivar.ts[,"egg"], order = c(1,0,0), seasonal = list(order = c(2,0,0), period = 12), xreg = xreg)
# forecast log egg prices
egg_forecast <- forecast(egg_arimax_fit, xreg = fxreg, h = 12)
# create a matrix of the forecasts
fxreg <- cbind(corn_forecast$mean, diesel_forecast$mean, cpi_forecast$mean)
# rename columns
colnames(fxreg) <- c("corn", "diesel", "cpi")
fxreg <- ts(fxreg, start = c(2025,3), frequency = 12)
fxreg
# create an xreg matrix for the ARIMAX forecast
xreg <- multivar.ts[,-1]
# fit the ARIMAX model
egg_arimax_fit <- arima(multivar.ts[,"egg"], order = c(1,0,0), seasonal = list(order = c(2,0,0), period = 12), xreg = xreg)
# forecast log egg prices
egg_forecast <- forecast(egg_arimax_fit, xreg = fxreg, h = 12)
fxreg <- ts(fxreg, start = c(2025,4), frequency = 12)
fxreg
fxreg <- ts(fxreg, start = c(2025,1), frequency = 12)
fxreg
egg_forecast <- forecast(egg_arimax_fit, xreg = fxreg, h = 12)
# create a matrix of the forecasts
fxreg <- cbind(corn_forecast$mean, diesel_forecast$mean, cpi_forecast$mean)
# rename columns
colnames(fxreg) <- c("corn", "diesel", "cpi")
fxreg
pred <- predict(egg_arimax_fit, n.ahead = 12, newxreg = as.matrix(fxreg))
View(pred)
pred()
plot(pred)
plot(pred$pred)
egg_forecast <- forecast(egg_arimax_fit, xreg = fxreg, h = 12)
fxreg <- cbind(corn_forecast$mean, diesel_forecast$mean, cpi_forecast$mean)
plot(corn_forecast)
corn_forecast$fitted
corn_forecast$series
corn_forecast$mean
cpi_forecast$mean
diesel_forecast$mean
tsp(egg_arimax_fit$x)
egg_arimax_fit$x
egg_arimax_fit$series
egg_arimax_fit$residuals
tsp(egg_arimax_fit$residuals)
tsp(multivar.ts)
tsp(fxreg)
# create an xreg matrix for the ARIMAX forecast
xreg <- multivar.ts[,-1]
# fit the ARIMAX model
egg_arimax_fit <- arima(multivar.ts[,"egg"], order = c(1,0,0), seasonal = list(order = c(2,0,0), period = 12), xreg = xreg)
# forecast log egg prices
egg_forecast <- forecast(egg_arimax_fit, xreg = fxreg, h = 12)
pred <- predict(egg_arimax_fit, n.ahead = 12, newxreg = as.matrix(fxreg))
autoplot(pred) +
ggtitle("12-Month Forecast of Log-Transformed Egg Prices") +
ylab("Log Price (USD), Dozen Eggs") +
xlab("Date") +
theme_minimal()
autoplot(pred$pred) +
ggtitle("12-Month Forecast of Log-Transformed Egg Prices") +
ylab("Log Price (USD), Dozen Eggs") +
xlab("Date") +
theme_minimal()
ggplot()+
geom_line(aes(x = data$month, y = data$egg), color = "blue") +
geom_line(aes(x = seq(as.Date("2025-03-01"), by = "month", length.out = 12), y = pred$pred), color = "red") +
geom_ribbon(aes(x = seq(as.Date("2025-03-01"), by = "month", length.out = 12), ymin = pred$pred - 1.96*pred$se, ymax = pred$pred + 1.96*pred$se), alpha = 0.2) +
labs(title = "12-Month Forecast of Log-Transformed Egg Prices",
x = "Date",
y = "Log Price (USD), Dozen Eggs") +
theme_minimal()
ggplot()+
geom_line(aes(x = seq(as.Date("1994-03-01"), by = "month", length.out = nrow(multivar.ts)), y = data$egg), color = "blue") +
geom_line(aes(x = seq(as.Date("2025-03-01"), by = "month", length.out = 12), y = pred$pred), color = "red") +
geom_ribbon(aes(x = seq(as.Date("2025-03-01"), by = "month", length.out = 12), ymin = pred$pred - 1.96*pred$se, ymax = pred$pred + 1.96*pred$se), alpha = 0.2) +
labs(title = "12-Month Forecast of Log-Transformed Egg Prices",
x = "Date",
y = "Log Price (USD), Dozen Eggs") +
theme_minimal()
ggplot()+
geom_line(aes(x = seq(as.Date("1994-03-01"), by = "month", length.out = nrow(multivar.ts)), y = exp(data$egg)), color = "blue") +
geom_line(aes(x = seq(as.Date("2025-03-01"), by = "month", length.out = 12), y = exp(pred$pred)), color = "red") +
labs(title = "12-Month Forecast of Egg Prices",
x = "Date",
y = "Price (USD), Dozen Eggs") +
theme_minimal()
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE)
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(readr)
library(dplyr)
# read in data
egg_data <- read.csv("Data/eggs_price_new.csv")
# rename columns for ease of use
colnames(egg_data) <- c("date","eggprice")
# convert date column to Date type
egg_data$date <- as.Date(egg_data$date, "%Y-%m-%d")
# create plotly time series
egg_plot <- plot_ly(data = egg_data, x = ~date, y = ~eggprice, type = 'scatter', mode = 'lines') %>%
layout(title = "Average Price of Grade A Large Eggs (per dozen), 1994-",
xaxis = list(title = "Date"),
yaxis = list(title = "Price (USD), Dozen Eggs"))
egg_plot
# log transform egg prices
egg_data$log_eggprice <- log(egg_data$eggprice)
# create ts object with transformed egg price
egg_ts <- ts(egg_data$log_eggprice, frequency = 12, start = c(1994, 3))
# plot transformed data
log_egg_plot <- plot_ly(data = egg_data, x = ~date, y = ~log_eggprice, type = 'scatter', mode = 'lines') %>%
layout(title = "Log Average Price of Grade A Large Eggs (per dozen), 1994-",
xaxis = list(title = "Date"),
yaxis = list(title = "Log Price (USD), Dozen Eggs"))
log_egg_plot
# Define parameters
n <- length(egg_ts)  # Total number of observations
# Calculate k as 1/3rd of the data, rounded down to the nearest multiple of 12
k <- floor(n / 3 / 12) * 12
h <- 12  # Forecast horizon (predicting 12 months ahead)
# Initialize matrices for RMSE
rmse1 <- matrix(NA, nrow = (n-k), ncol = h)  # RMSE for Model 1
rmse2 <- matrix(NA, nrow = (n-k), ncol = h)  # RMSE for Model 2
rmse3 <- matrix(NA, nrow = (n-k), ncol = h)  # RMSE for Model 3
rmse4 <- matrix(NA, nrow = (n-k), ncol = h)  # RMSE for Model 4
# Define rolling start time
st <- tsp(egg_ts)[1] + (k - 2) / 12
# Walk-Forward Validation Loop
for (i in 1:(n-k)) {
# Define rolling training and test sets
xtrain <- window(egg_ts, end = st + i / 12)
xtest <- window(egg_ts, start = st + (i + 1) / 12, end = st + (i + h) / 12)  # 12-step ahead test data
# Fit SARIMA(2,1,2)(1,1,1)[12]
fit1 <- Arima(xtrain, order = c(2,1,2), seasonal = list(order = c(1,1,1), period = 12),
include.drift = FALSE, lambda = 0, method = "ML")
fcast1 <- forecast(fit1, h = h)
# Fit SARIMA(0,1,2)(0,1,1)[12]
fit2 <- Arima(xtrain, order = c(0,1,2), seasonal = list(order = c(0,1,1), period = 12),
include.drift = FALSE, lambda = 0, method = "ML")
fcast2 <- forecast(fit2, h = h)
# Fit ARIMA(0,1,0)(0,1,1)[12]
fit3 <- Arima(xtrain, order = c(0,1,0), seasonal = list(order = c(0,1,1), period = 12),
include.drift = FALSE, lambda = 0, method = "ML")
fcast3 <- forecast(fit3, h = h)
# Fit ARIMA(0,1,0)(0,0,2)[12]
fit4 <- Arima(xtrain, order = c(0,1,0), seasonal = list(order = c(0,0,2), period = 12),
include.drift = FALSE, lambda = 0, method = "ML")
fcast4 <- forecast(fit4, h = h)
# Compute RMSE (Root Mean Squared Error)
rmse1[i, 1:length(xtest)] <- sqrt(mean((fcast1$mean - xtest)^2, na.rm = TRUE))
rmse2[i, 1:length(xtest)] <- sqrt(mean((fcast2$mean - xtest)^2, na.rm = TRUE))
rmse3[i, 1:length(xtest)] <- sqrt(mean((fcast3$mean - xtest)^2, na.rm = TRUE))
rmse4[i, 1:length(xtest)] <- sqrt(mean((fcast4$mean - xtest)^2, na.rm = TRUE))
}
# Compute Mean RMSE Across Forecast Horizons
rmse1_avg <- colMeans(rmse1, na.rm = TRUE)
rmse2_avg <- colMeans(rmse2, na.rm = TRUE)
rmse3_avg <- colMeans(rmse3, na.rm = TRUE)
rmse4_avg <- colMeans(rmse4, na.rm = TRUE)
# Create a DataFrame for Plotting
rmse_table <- data.frame(
Horizon = 1:h,
RMSE_Model1 = rmse1_avg,
RMSE_Model2 = rmse2_avg,
RMSE_Model3 = rmse3_avg,
RMSE_Model4 = rmse4_avg
)
# Display RMSE Table
kable(rmse_table, format = "html", digits = 4, caption = "RMSE for 12-Step Forecasts") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
kable(rmse_table, format = "html", digits = 4, caption = "RMSE for 12-Step Forecasts") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
??kable_styling
library(kableExtra)
kable(rmse_table, format = "html", digits = 4, caption = "RMSE for 12-Step Forecasts") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
# Create a DataFrame for Plotting
rmse_table <- data.frame(
Horizon = 1:h,
`SARIMA(2,1,2)(1,1,1)[12]` = rmse1_avg,
`SARIMA(0,1,2)(0,1,1)[12]` = rmse2_avg,
`SARIMA(0,1,0)(0,1,1)[12]` = rmse3_avg,
`SARIMA(0,1,0)(0,0,2)[12]` = rmse4_avg
)
# Display RMSE Table
kable(rmse_table, format = "html", digits = 4, caption = "RMSE for 12-Step Forecasts") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
rmse_table <- data.frame(
Horizon = 1:h,
"SARIMA(2,1,2)(1,1,1)[12]" = rmse1_avg,
`SARIMA(0,1,2)(0,1,1)[12]` = rmse2_avg,
`SARIMA(0,1,0)(0,1,1)[12]` = rmse3_avg,
`SARIMA(0,1,0)(0,0,2)[12]` = rmse4_avg
)
# Display RMSE Table
kable(rmse_table, format = "html", digits = 4, caption = "RMSE for 12-Step Forecasts") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
rmse_table <- data.frame(
Horizon = 1:h,
RMSE_Model1 = rmse1_avg,
RMSE_Model2 = rmse2_avg,
RMSE_Model3 = rmse3_avg,
RMSE_Model4 = rmse4_avg
)
# Display RMSE Table
kable(rmse_table, format = "html", digits = 4, caption = "RMSE for 12-Step Forecasts") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
ggplot(rmse_table, aes(x = Horizon)) +
geom_line(aes(y = RMSE_Model1, color = "SARIMA(2,1,2)(1,1,1)[12]")) +
geom_line(aes(y = RMSE_Model2, color = "SARIMA(0,1,0)(0,1,1)[12]")) +
geom_line(aes(y = RMSE_Model3, color = "SARIMA(0,1,0)(0,1,1)[12]")) +
geom_line(aes(y = RMSE_Model3, color = "SARIMA(0,1,0)(0,0,2)[12]")) +
labs(title = "RMSE Comparison for 12-Step Forecasts",
x = "Forecast Horizon (Months Ahead)",
y = "Root Mean Squared Error (RMSE)") +
scale_color_manual(name = "Models", values = c("red", "blue", "forestgreen", "orange")) +
theme_minimal()
ggplot(rmse_table, aes(x = Horizon)) +
geom_line(aes(y = RMSE_Model1, color = "SARIMA(2,1,2)(1,1,1)[12]")) +
geom_line(aes(y = RMSE_Model2, color = "SARIMA(0,1,0)(0,1,1)[12]")) +
geom_line(aes(y = RMSE_Model3, color = "SARIMA(0,1,0)(0,1,1)[12]")) +
geom_line(aes(y = RMSE_Model4, color = "SARIMA(0,1,0)(0,0,2)[12]")) +
labs(title = "RMSE Comparison for 12-Step Forecasts",
x = "Forecast Horizon (Months Ahead)",
y = "Root Mean Squared Error (RMSE)") +
scale_color_manual(name = "Models", values = c("red", "blue", "forestgreen", "orange")) +
theme_minimal()
ggplot(rmse_table, aes(x = Horizon)) +
geom_line(aes(y = RMSE_Model1, color = "SARIMA(2,1,2)(1,1,1)[12]")) +
geom_line(aes(y = RMSE_Model2, color = "SARIMA(0,1,0)(0,1,1)[12]")) +
geom_line(aes(y = RMSE_Model3, color = "SARIMA(0,1,0)(0,1,1)[12]")) +
geom_line(aes(y = RMSE_Model4, color = "SARIMA(0,1,0)(0,0,2)[12]")) +
labs(title = "RMSE Comparison for 12-Step Forecasts",
x = "Forecast Horizon (Months Ahead)",
y = "Root Mean Squared Error (RMSE)") +
scale_color_manual(name = "Models", values = c("red", "blue", "forestgreen", "orange")) +
theme_minimal()
ggplot(rmse_table, aes(x = Horizon)) +
geom_line(aes(y = RMSE_Model1, color = "SARIMA(2,1,2)(1,1,1)[12]")) +
geom_line(aes(y = RMSE_Model2, color = "SARIMA(0,1,0)(0,1,1)[12]")) +
geom_line(aes(y = RMSE_Model3, color = "SARIMA(0,1,0)(0,1,1)[12]")) +
geom_line(aes(y = RMSE_Model4, color = "SARIMA(0,1,0)(0,0,2)[12]")) +
labs(title = "RMSE Comparison for 12-Step Forecasts",
x = "Forecast Horizon (Months Ahead)",
y = "Root Mean Squared Error (RMSE)") +
scale_color_manual(name = "Models", values = c("red", "blue", "forestgreen", "orange")) +
theme_minimal()
ggplot(rmse_table, aes(x = Horizon)) +
geom_line(aes(y = RMSE_Model1, color = "SARIMA(2,1,2)(1,1,1)[12]")) +
geom_line(aes(y = RMSE_Model2, color = "SARIMA(0,1,2)(0,1,1)[12]")) +
geom_line(aes(y = RMSE_Model3, color = "SARIMA(0,1,0)(0,1,1)[12]")) +
geom_line(aes(y = RMSE_Model4, color = "SARIMA(0,1,0)(0,0,2)[12]")) +
labs(title = "RMSE Comparison for 12-Step Forecasts",
x = "Forecast Horizon (Months Ahead)",
y = "Root Mean Squared Error (RMSE)") +
scale_color_manual(name = "Models", values = c("red", "blue", "forestgreen", "orange")) +
theme_minimal()
model_output_1 <- capture.output(sarima(res.fit, 0, 1, 0, 0, 0, 2, 12))
model_output_1 <- capture.output(sarima(egg_ts, 0, 1, 0, 0, 0, 2, 12))
model_output_1 <- capture.output(sarima(egg_ts, 0, 1, 0, 0, 0, 2, 12))
capture.output(sarima(egg_ts, 0, 1, 0, 0, 0, 2, 12))
model_output_1
model_output_2 <- capture.output(sarima(egg_ts, 2, 1, 2, 1, 1, 1, 12))
model_output_2
capture.output(sarima(egg_ts, 2, 1, 2, 1, 1, 1, 12))
# read in datasets and rename for ease of use
diesel <- read.csv("Data/diesel_price.csv")
colnames(diesel) <- c("date", "diesel_price")
corn <- read.csv("Data/corn_price.csv")
colnames(corn) <- c("date", "corn_price")
cpi <- read.csv("Data/CPI_meats_eggs.csv")
colnames(cpi) <- c("date", "cpi")
# convert diesel from weekly to monthly
diesel$date <- as.Date(diesel$date, "%Y-%m-%d")
diesel$month <- as.yearmon(diesel$date)
diesel_monthly <- diesel |>
group_by(month) |>
summarize(diesel = mean(diesel_price))
# create month columns
corn$month <- as.yearmon(corn$date)
cpi$month <- as.yearmon(cpi$date)
egg_data$month <- as.yearmon(egg_data$date)
# merge datasets
data <- egg_data |>
left_join(corn, by = "month") |>
left_join(diesel_monthly, by = "month") |>
left_join(cpi, by = "month")
# remove unnecessary columns and reorder
data <- data |>
select(-c(date, date.x, date.y, log_eggprice)) |>
select(c(month, eggprice, corn_price, diesel, cpi))
# rename
colnames(data) <- c("month","egg","corn","diesel","cpi")
# since there is no February 2025 data for diesel, I will set the February 2025 value to be the same as the January 2025 data
data$diesel[which(data$month == "Feb 2025")] <- data$diesel[which(data$month == "Jan 2025")]
library(gridExtra)
# create time series object for egg prices, and then difference and log and then difference
egg.ts <- ts(data$egg, frequency = 12, start = c(1994, 3))
egg.diff <- diff(egg.ts)
egg.log.diff <- diff(log(egg.ts))
# create plots for differenced and log differenced egg prices
p1 <- autoplot(egg.diff) + ggtitle("Differenced Egg Price") + ylab("Price (USD)") + xlab("Date")+
theme_minimal()
p2 <- autoplot(egg.log.diff) + ggtitle("Log Differenced Egg Price") + ylab("Price (USD)") + xlab("Date")+
theme_minimal()
# plot
grid.arrange(p1, p2, ncol = 2)
# create time series object for corn prices, and then difference and then log and then difference
corn.ts <- ts(data$corn, frequency = 12, start = c(1994, 3))
corn.diff <- diff(corn.ts)
corn.log.diff <- diff(log(corn.ts))
# create plots for differenced and log differenced corn prices
p1 <- autoplot(corn.diff) + ggtitle("Differenced Corn Price") + ylab("Price (USD)") + xlab("Date")+
theme_minimal()
p2 <- autoplot(corn.log.diff) + ggtitle("Log Differenced Corn Price") + ylab("Price (USD)") + xlab("Date")+
theme_minimal()
# plot
grid.arrange(p1, p2, ncol = 2)
# create time series object for diesel prices, and then difference and then log and then difference
diesel.ts <- ts(data$diesel, frequency = 12, start = c(1994, 3))
diesel.diff <- diff(diesel.ts)
diesel.log.diff <- diff(log(diesel.ts))
# create plots for differenced and log differenced diesel prices
p1 <- autoplot(diesel.diff) + ggtitle("Differenced Diesel Price") + ylab("Price (USD)") + xlab("Date")+
theme_minimal()
p2 <- autoplot(diesel.log.diff) + ggtitle("Log Differenced Diesel Price") + ylab("Price (USD)") + xlab("Date")+
theme_minimal()
# plot
grid.arrange(p1, p2, ncol = 2)
# create time series object for CPI, and then difference and then log and then difference
cpi.ts <- ts(data$cpi, frequency = 12, start = c(1994, 3))
cpi.diff <- diff(cpi.ts)
cpi.log.diff <- diff(log(cpi.ts))
# create plots for differenced and log differenced CPI
p1 <- autoplot(cpi.diff) + ggtitle("Differenced CPI") + ylab("CPI") + xlab("Date")+
theme_minimal()
p2 <- autoplot(cpi.log.diff) + ggtitle("Log Differenced CPI") + ylab("CPI") + xlab("Date")+
theme_minimal()
# plot
grid.arrange(p1, p2, ncol = 2)
# update the data frame with log-transformed variables
data$egg <- log(data$egg)
data$corn <- log(data$corn)
data$diesel <- log(data$diesel)
# fit linear regression model and then summarize
egg.lm <- lm(egg ~ corn + diesel + cpi, data = data)
summary(egg.lm)
lm_fit <- egg.lm$residuals
ggAcf(lm_fit, lag.max = 36) +
labs(title = "ACF of Residuals from Linear Regression Model")
res.ts <- ts(lm_fit, frequency = 12, start = c(1994, 3))
auto.arima(res.ts)
# create a multivariate time series object, excluding the month column
multivar.ts <- ts(data[,-1], start = c(1994, 3), frequency = 12)
# select ARIMA model for corn prices
auto.arima(multivar.ts[,"corn"])
# fit and forecast corn prices
corn_fit <- arima(multivar.ts[,"corn"], order = c(0,1,1))
corn_forecast <- forecast(corn_fit, h = 12)
# select ARIMA model for diesel prices
auto.arima(multivar.ts[,"diesel"])
# fit and forecast diesel prices
diesel_fit <- arima(multivar.ts[,"diesel"], order = c(0,1,2))
diesel_forecast <- forecast(diesel_fit, h = 12)
# select ARIMA model for CPI
auto.arima(multivar.ts[,"cpi"])
# fit and forecast CPI
cpi_fit <- arima(multivar.ts[,"cpi"], order = c(4,2,1), seasonal = c(0,0,2))
cpi_forecast <- forecast(cpi_fit, h = 12)
# create a matrix of the forecasts
fxreg <- cbind(corn_forecast$mean, diesel_forecast$mean, cpi_forecast$mean)
# rename columns
colnames(fxreg) <- c("corn", "diesel", "cpi")
# create an xreg matrix for the ARIMAX forecast
xreg <- multivar.ts[,-1]
# fit the ARIMAX model
egg_arimax_fit <- arima(multivar.ts[,"egg"], order = c(1,0,0), seasonal = list(order = c(2,0,0), period = 12), xreg = xreg)
# forecast log egg prices
pred <- predict(egg_arimax_fit, n.ahead = 12, newxreg = as.matrix(fxreg))
ggplot()+
geom_line(aes(x = seq(as.Date("1994-03-01"), by = "month", length.out = nrow(multivar.ts)), y = data$egg), color = "blue") +
geom_line(aes(x = seq(as.Date("2025-03-01"), by = "month", length.out = 12), y = pred$pred), color = "red") +
geom_ribbon(aes(x = seq(as.Date("2025-03-01"), by = "month", length.out = 12), ymin = pred$pred - 1.96*pred$se, ymax = pred$pred + 1.96*pred$se), alpha = 0.2) +
labs(title = "12-Month Forecast of Log-Transformed Egg Prices",
x = "Date",
y = "Log Price (USD), Dozen Eggs") +
theme_minimal()
ggplot()+
geom_line(aes(x = seq(as.Date("1994-03-01"), by = "month", length.out = nrow(multivar.ts)), y = exp(data$egg)), color = "blue") +
geom_line(aes(x = seq(as.Date("2025-03-01"), by = "month", length.out = 12), y = exp(pred$pred)), color = "red") +
labs(title = "12-Month Forecast of Egg Prices",
x = "Date",
y = "Price (USD), Dozen Eggs") +
theme_minimal()
# Define parameters
n <- length(egg_ts)  # Total number of observations
# Calculate k as 1/3rd of the data, rounded down to the nearest multiple of 12
k <- floor(n / 3 / 12) * 12
h <- 12  # Forecast horizon (predicting 12 months ahead)
# Initialize matrices for RMSE
rmse5 <- matrix(NA, nrow = (n-k), ncol = h)  # RMSE for ARIMAX
# Define rolling start time
st <- tsp(egg_ts)[1] + (k - 2) / 12
# Walk-Forward Validation Loop
for (i in 1:(n-k)) {
# Define rolling training and test sets
xtrain <- window(egg_ts, end = st + i / 12)
xtest <- window(egg_ts, start = st + (i + 1) / 12, end = st + (i + h) / 12)  # 12-step ahead test data
# define rolling training and test external regressor matrices
xregtrain <- window(xreg, end = st + i / 12)
xregtest <- window(xreg, start = st + (i + 1) / 12, end = st + (i + h) / 12)
# Fit ARIMAX
fit1 <- Arima(xtrain, order = c(1,0,0), seasonal = list(order = c(2,0,0), period = 12),
xreg = xregtrain, include.drift = FALSE, lambda = 0, method = "ML")
fcast1 <- forecast(fit1, h = h, xreg = xregtest)
# Compute RMSE (Root Mean Squared Error)
rmse5[i, 1:length(xtest)] <- sqrt(mean((fcast1$mean - xtest)^2, na.rm = TRUE))
}
# Compute Mean RMSE Across Forecast Horizons
rmse5_avg <- colMeans(rmse5, na.rm = TRUE)
# Create a DataFrame for Plotting
rmse_table <- data.frame(
Horizon = 1:h,
RMSE_Model1 = rmse1_avg,
RMSE_Model5 = rmse5_avg
)
# Display RMSE Table
kable(rmse_table, format = "html", digits = 4, caption = "RMSE for 12-Step Forecasts") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
hist(rmse5)
View(rmse5)
ggplot(rmse_table, aes(x = Horizon)) +
geom_line(aes(y = RMSE_Model1, color = "SARIMA(2,1,2)(1,1,1)[12]")) +
geom_line(aes(y = RMSE_Model5, color = "ARIMAX(1,0,0)(2,0,0)[12]")) +
labs(title = "RMSE Comparison for 12-Step Forecasts",
x = "Forecast Horizon (Months Ahead)",
y = "Root Mean Squared Error (RMSE)") +
scale_color_manual(name = "Models", values = c("red", "blue")) +
theme_minimal()
ggplot(rmse_table, aes(x = Horizon)) +
geom_line(aes(y = RMSE_Model1, color = "SARIMA(2,1,2)(1,1,1)[12]")) +
geom_line(aes(y = RMSE_Model5, color = "ARIMAX(1,0,0)(2,0,0)[12]")) +
labs(title = "RMSE Comparison for 12-Step Forecasts",
x = "Forecast Horizon (Months Ahead)",
y = "Root Mean Squared Error (RMSE)") +
scale_color_manual(name = "Models", values = c("red", "blue")) +
theme_minimal()
plot(rmse5_avg)
View(rmse1)
model_output_1 <- capture.output(sarima(egg_ts, 0, 1, 0, 0, 0, 2, 12))
model_output_1
model_output_1
capture.output(sarima(egg_ts, 0, 1, 0, 0, 0, 2, 12))
model_output_2 <- capture.output(sarima(egg_ts, 2, 1, 2, 1, 1, 1, 12))
model_output_2
capture.output(sarima(egg_ts, 2, 1, 2, 1, 1, 1, 12))
setwd("~/Library/CloudStorage/Box-Box/DSAN-5200/dsan5200-spring2025-project-group-04")
data <- read.csv("data/clean_data/joined_data.csv")
library(tidyverse)
library(GGally)
ggpairs(data)
View(data)
ggpairs(data[,-c(1,2)])
data <- data |> mutate(death_pc <- mean_addiction_deaths/census_2020_pop)
data <- data |> mutate(death_pc <- mean_addiction_deaths/census_2020_pop)
ggpairs(data[,-c(1,2)])
